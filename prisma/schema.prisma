generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Book {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  author      String? @db.Text
  publisher   String? @default("")
  description String? @db.Text
  copies      Int     @default(0) @db.Int
  imageUrl    String? @db.Text
  isPublished Boolean @default(false)

  messages  Message[]
  bookmarks Bookmark[]

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments Attachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title, author, publisher])
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  books Book[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookId])
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  name     String
  imageUrl String @db.Text
  email    String @db.Text

  messages  Message[]
  bookmarks Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  bookId String
  book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([bookId])
  @@index([profileId])
}

model Bookmark {
  id        String   @id @default(uuid())
  profileId String
  bookId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  book    Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([bookId])
}
